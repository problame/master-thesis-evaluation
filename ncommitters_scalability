#!/usr/bin/env python3
from lib.store import Store
import lib.isolcpus
import lib.pmem
from lib.resultstorage import ResultStorage
import lib.storage_stacks
import lib.benchmarks
import lib.benchmarks_fio_analyzers
from pathlib import Path

store = Store()

store.add('zil_pmem_builddir', "/home/schwarz/zil-pmem/zil-pmem")
store.add('fio_binary', "/usr/bin/fio")

isolcpus_data = lib.isolcpus.assert_effectively_singlesocket_system(0)

def determine_regions_and_setup_namespaces():
    pmem_config_snippet_by_interleaving_level = {
        4: {
            # sudo ipmctl create -goal -socket 0 PersistentMemoryType=AppDirect
            "PersistentMemoryType": "AppDirect",
            "SocketID": "0x0000",
            "DimmID": "0x0001, 0x0011, 0x0101, 0x0111",
        },
        1: {
            # sudo ipmctl create -goal -socket 0 PersistentMemoryType=AppDirectNotInterleaved
            "PersistentMemoryType": "AppDirectNotInterleaved",
            "SocketID": "0x0000",
            "DimmID": "0x0001",
        }
    }

    for il, pmem_config_snippet in pmem_config_snippet_by_interleaving_level.items():
        pmem_config = {
            "regions": [
                # the dimms on socket 0 are potentially interleaved
                {
                    **pmem_config_snippet,
                    "namespaces": [
                        {
                            "mode": "devdax",
                            "size": 40 * (1<<30),
                            "configlabel": "devdax",
                        },
                        {
                            "mode": "fsdax",
                            "size": 40 * (1<<30),
                            "configlabel": "fsdax",
                        },
                    ]
                },
                # all the dimms on the disabled socket are treated as block devices (the machine has no other nvmes)
                *[{
                     "PersistentMemoryType": "AppDirectNotInterleaved",
                    "SocketID": "0x0001",
                    "DimmID": dimmid,
                    "namespaces": [
                        {
                            "mode": "fsdax",
                            "size": 100 * (1<<30),
                            "configlabel": "blockdevice", #!!!!!!!!!
                        },
                    ]
                } for dimmid in ["0x1011", "0x1101", "0x1111"]],
            ]
        }
        try:
            print(f"trying pmem config: {pmem_config}")
            lib.pmem.setup_pmem(pmem_config, store)
            print(f"success with pmem config {pmem_config}")
            return {
                "interleaving": il,
                "pmem_config_snippet": pmem_config_snippet,
                "pmem_config": pmem_config,

            }
        except lib.pmem.RegionReconfigurationRequiredError as e:
            print(f"region reconfiguration required, trying other pmem config:\n\n{e}")
            continue

    raise Exception("none of the predefined region configurations matches the system config, fix manually using impctl")

pmem_setup_data = determine_regions_and_setup_namespaces()

resultdir = Path("./results")
result_storage = ResultStorage(resultdir)


for ncommitters in [1,2,3,4,8,12,24]:
    storage_stack = lib.storage_stacks.ZFSPmem(store, "zfs", "0", "0", f"{ncommitters}")
    with storage_stack as storage_stack:
        bench = lib.benchmarks.Fio4kSyncRandFsWrite(
            store=store,
            identity="fio-4k-sync-rand-write--size-div-by-numjobs",
            numjobs_values=list(range(1,19)),
            size=1<<30,
            size_mode="size-div-by-numjobs",
            dir_is_mountpoint_format_string=True,
            runtime_seconds=60,
        )

        def emit_result(rd):
            rd = {
                "store": store.to_dict(),
                "pmem_setup_data": pmem_setup_data,
                "isolcpus_data": isolcpus_data,
                "storage_stack": storage_stack.as_dict(),
                **rd,
            }
            result_storage.save_json_result("ncommitters_scalability__v5", rd)

        def setup_analyzers(exitstack):
            return {
                **lib.benchmarks_fio_analyzers.zil_pmem_only_kstats(),
                "cpu_time": lib.benchmarks_fio_analyzers.cpu_time_measurements(),
            }

        bench.run(storage_stack.dataset_mountpoint_format_string, emit_result, setup_analyzers=setup_analyzers)

